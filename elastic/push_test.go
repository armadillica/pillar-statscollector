package elastic

import (
	"encoding/json"
	"io/ioutil"
	"net/http"

	"github.com/stretchr/testify/assert"

	log "github.com/sirupsen/logrus"
	check "gopkg.in/check.v1"
)

type PushTestSuite struct {
	url string
}

type ElasticResponse struct {
	Index   string `json:"_index"`
	Type    string `json:"_type"`
	ID      string `json:"_id"`
	Version int    `json:"_version"`
	Source  Stats  `json:"_source"`
}

var _ = check.Suite(&PushTestSuite{})

func (s *PushTestSuite) SetUpTest(c *check.C) {
	s.url = "http://localhost:9200/unittest/stats/"
}

func (s *PushTestSuite) TearDownTest(c *check.C) {
	log.Info("tearing down test, deleting index.")
	ResetIndex(s.url)
}

func (s *PushTestSuite) get(c *check.C, ID string) *ElasticResponse {
	url := s.url + ID + "?pretty"
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		c.Fatalf("error getting %s: %s", url, err)
	}
	client := http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		c.Fatal(err)
	}
	assert.Equal(c, http.StatusOK, resp.StatusCode)

	body, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()
	if err != nil {
		c.Fatal(err)
	}

	var response ElasticResponse
	if decodeErr := json.Unmarshal(body, &response); decodeErr != nil {
		c.Fatal(err)
	}

	return &response
}

func (s *PushTestSuite) TestStoreWithoutID(t *check.C) {
	stats := Stats{}
	stats.Users.SubscriberCount = 3214
	docID, err := Push(s.url, stats)
	assert.Nil(t, err)

	// An ID should have been generated.
	assert.NotEqual(t, "", docID)

	// We should be able to find the document in Elastic by this ID.
	found := s.get(t, docID)
	assert.Equal(t, docID, found.ID)
	assert.Equal(t, 3214, found.Source.Users.SubscriberCount)
}

func (s *PushTestSuite) TestStoreWithID(t *check.C) {
	// Use an ID that could have been generated by MongoDB
	stats := Stats{ID: "5a57859898377336d89a668c"}
	stats.Users.SubscriberCount = 3214
	docID, err := Push(s.url, stats)
	assert.Nil(t, err)

	// The ID should have been returned.
	assert.Equal(t, "5a57859898377336d89a668c", docID)

	// We should be able to find the document in Elastic by this ID.
	found := s.get(t, "5a57859898377336d89a668c")
	assert.Equal(t, "5a57859898377336d89a668c", found.ID)
	assert.Equal(t, 3214, found.Source.Users.SubscriberCount)
}
